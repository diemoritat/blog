{"version":3,"file":"static/webpack/static/development/pages/_app.js.61339cd3c663fa71f49e.hot-update.js","sources":["webpack:///./threejs/ThreeScene.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport * as THREE from \"three\";\nimport OrbitControls from \"orbit-controls-es6\";\nimport styled from \"styled-components\";\n\nconst CanvasWrapper = styled.div`\n  width: calc(100vw - 40px);\n  height: calc(100vh - 40px);\n  pointer-events: none;\n  position: absolute;\n  overflow: hidden;\n  top: 20px;\n  left: 20px;\n  z-index: -1;\n`\n\nclass Scene extends Component {\n  render() {\n    return <CanvasWrapper ref={mount => {this.mount = mount}} id=\"three\" />;\n  }\n\n  componentDidMount() {\n    const width = this.mount.clientWidth;\n    const height = this.mount.clientHeight;\n\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xF8F8F8);\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true });\n    renderer.setSize(width, height);\n    renderer.setClearColor(0xF8F8F8, 1.0);\n\n    const dom = document.getElementById(\"three\");\n    dom.appendChild(renderer.domElement);\n\n    const camera = new THREE.PerspectiveCamera(35, width / height, 0.1, 1000);\n    camera.position.z = 5;\n\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enabled = true;\n    controls.maxDistance = 1500;\n    controls.minDistance = 0;\n\n    const geometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);\n    const material = new THREE.MeshLambertMaterial({\n      color: this.props.color\n    });\n\n    const cube = new THREE.Mesh(geometry, material);\n    cube.rotation.x = 1.9;\n    cube.rotation.y = 0.7;\n    // scene.add(cube);\n\n    // const xS = 63, yS = 63;\n    // terrainScene = THREE.Terrain({\n    //     easing: THREE.Terrain.Linear,\n    //     frequency: 2.5,\n    //     heightmap: THREE.Terrain.DiamondSquare,\n    //     material: new THREE.MeshBasicMaterial({color: 0x5566aa}),\n    //     maxHeight: 100,\n    //     minHeight: -100,\n    //     steps: 1,\n    //     useBufferGeometry: false,\n    //     xSegments: xS,\n    //     xSize: 1024,\n    //     ySegments: yS,\n    //     ySize: 1024,\n    // });\n    // Assuming you already have your global scene, add the terrain to it\n    // scene.add(terrainScene);\n\n    const light_p = new THREE.PointLight(0xffffff);\n    light_p.position.set(0, this.mount.clientWidth / 2, 500);\n    scene.add(light_p);\n\n    const light_a = new THREE.AmbientLight(0xffffff, 0.6);\n    scene.add(light_a);\n\n    const animate = function() {\n\n      cube.rotation.x += 0.001;\n      cube.rotation.y += 0.01;\n      requestAnimationFrame(animate);\n\n      renderer.render(scene, camera);\n    };\n\n    animate();\n\n    this.cube = cube;\n  }\n\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (this.props.color !== nextProps.color) {\n      this.cube.material.color.setHex(nextProps.color);\n    }\n  }\n}\n\nexport default Scene;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AAUA;;;;;;;;;;;;;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;;AApFA;AACA;AAsFA;;;;A","sourceRoot":""}